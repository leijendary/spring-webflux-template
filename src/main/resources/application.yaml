info:
  app:
    organization: leijendary
    group: ${group}
    name: ${name}
    description: ${description}
    version: ${version}
  api:
    termsOfService:
    contact:
      name: Jonathan Leijendekker
      url: https://leijendary.com
      email:
    license:
      name: Jonathan Leijendekker
      url: https://leijendary.com

auth:
  anonymousUser:
    principal: Anonymous User
  system:
    principal: System

cloud:
  aws:
    credentials:
      instanceProfile: false
      useDefaultAwsCredentialsChain: false
    stack:
      auto: false
    region:
      auto: false
      useDefaultAwsRegionChain: false

emission:
  deadline: 5m

encrypt:
  key:
  salt:

number:
  scale: 2
  round: HALF_UP

retry:
  maxAttempts: 3
  backoff:
    delay: 5
    maxDelay: 20
    multiplier: 2

spring:
  application:
    name: \${info.app.name}
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration
  data:
    jdbc:
      repositories:
        enabled: false
    jpa:
      repositories:
        enabled: false
    ldap:
      repositories:
        enabled: false
    redis:
      repositories:
        enabled: false
  r2dbc:
    primary:
      name: primary
      url:
      username:
      password:
      pool:
        initialSize: 10
        maxSize: 10
    readonly:
      name: readonly
      url:
      username:
      password:
      pool:
        initialSize: 5
        maxSize: 5
    batch:
      size: 1000
  liquibase:
    url:
    user:
    password:
  devtools:
    livereload:
      port: 35730
  messages:
    basename: messages.access, messages.error, messages.validation
  cache:
    type: redis
    redis:
      timeToLive: 5h
  cloud:
    discovery:
      client:
        simple:
          instances:
            google:
              - uri: https://www.google.com
    loadbalancer:
      cache:
        enabled: false
      retry:
        maxRetriesOnSameServiceInstance: 3
        retryOnAllOperations: true
        retryableStatusCodes:
          - 502
          - 503
        backoff:
          enabled: true
          minBackoff: \${retry.backoff.delay}ms
          maxBackoff: \${retry.backoff.maxDelay}ms
          jitter: \${retry.backoff.multiplier}
    serviceRegistry:
      autoRegistration:
        enabled: false
    function:
      definition: sampleCreate;sampleUpdate;sampleDelete;sampleCreated;sampleUpdated;sampleDeleted
    stream:
      bindings:
        sampleCreate-out-0:
          destination: \${info.app.organization}.sample.create
        sampleCreated-in-0:
          destination: \${info.app.organization}.sample.create
        sampleUpdate-out-0:
          destination: \${info.app.organization}.sample.update
        sampleUpdated-in-0:
          destination: \${info.app.organization}.sample.update
        sampleDelete-out-0:
          destination: \${info.app.organization}.sample.delete
        sampleDeleted-in-0:
          destination: \${info.app.organization}.sample.delete
      default:
        group: \${info.app.name}
      kafka:
        binder:
          autoAddPartitions: true
        default:
          consumer:
            enableDlq: true
        streams:
          binder:
            deserializationExceptionHandler: sendToDlq
            functions:
              sampleCreate:
                applicationId: \${info.app.name}.\${spring.cloud.stream.bindings.sampleCreate-out-0.destination}
              sampleCreated:
                applicationId: \${info.app.name}.\${spring.cloud.stream.bindings.sampleCreated-in-0.destination}
              sampleUpdate:
                applicationId: \${info.app.name}.\${spring.cloud.stream.bindings.sampleUpdate-out-0.destination}
              sampleUpdated:
                applicationId: \${info.app.name}.\${spring.cloud.stream.bindings.sampleUpdated-in-0.destination}
              sampleDelete:
                applicationId: \${info.app.name}.\${spring.cloud.stream.bindings.sampleDelete-out-0.destination}
              sampleDeleted:
                applicationId: \${info.app.name}.\${spring.cloud.stream.bindings.sampleDeleted-in-0.destination}
  elasticsearch:
    uris:
  kafka:
    bootstrapServers:
    properties:
      interceptor:
        classes: com.leijendary.spring.webflux.template.core.interceptor.KafkaLoggingInterceptor
  redis:
    host:
    port:
  sleuth:
    messaging:
      enabled: true
      kafka:
        streams:
          enabled: true
    traceId128: true
    otel:
      config:
        traceIdRatioBased: 1
      exporter:
        jaeger:
          endpoint:

server:
  http2:
    enabled: true
  port: 443
  ssl:
    enabled: true
    keyAlias: spring-boot
    keyStoreType: PKCS12
    keyStore: classpath:ssl/keystore.p12
    keyStorePassword: spring-boot

springdoc:
  pathsToMatch: /api/**

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus

logging:
  level:
    liquibase:
      hub: ERROR
    org:
      apache:
        kafka: ERROR
      springframework:
        data:
          elasticsearch:
            support:
              VersionInfo: ERROR
    io:
      r2dbc:
        postgresql:
          client:
            ReactorNettyClient: ERROR
